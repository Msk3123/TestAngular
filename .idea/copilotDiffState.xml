<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;angular.dev&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;NG_BUILD_PARALLEL_TS=0 ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/cdk&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/common&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/core&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/material&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^18.2.13&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.14.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular/build&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^18.2.13&quot;,&#10;    &quot;typescript&quot;: &quot;~5.5.0&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;name&quot;: &quot;angular.dev&quot;,&#13;&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#13;&#10;  &quot;scripts&quot;: {&#13;&#10;    &quot;ng&quot;: &quot;ng&quot;,&#13;&#10;    &quot;start&quot;: &quot;NG_BUILD_PARALLEL_TS=0 ng serve&quot;,&#13;&#10;    &quot;build&quot;: &quot;ng build&quot;,&#13;&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;&#13;&#10;  },&#13;&#10;  &quot;private&quot;: true,&#13;&#10;  &quot;dependencies&quot;: {&#13;&#10;    &quot;@angular/animations&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/cdk&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/common&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/compiler&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/core&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/forms&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/material&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/platform-browser&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/router&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#13;&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#13;&#10;    &quot;zone.js&quot;: &quot;~0.14.0&quot;&#13;&#10;  },&#13;&#10;  &quot;devDependencies&quot;: {&#13;&#10;    &quot;@angular/build&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/cli&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/compiler-cli&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;typescript&quot;: &quot;~5.5.0&quot;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Service/player.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Service/player.service.ts" />
              <option name="originalContent" value="import {Component, Inject, Injectable, signal} from '@angular/core';&#10;&#10;&#10;export interface Player{&#10;    firstName: string;&#10;    lastName: string;&#10;    nickname: string;&#10;    level: number;&#10;    averageAccuracy: number;&#10;}&#10;&#10;@Injectable({&#10;    providedIn: 'root'&#10;})&#10;export class PlayerService {&#10;    private players = signal&lt;Player[]&gt;([]);&#10;    private curentPlayer = signal&lt;Player | null&gt;(null);&#10;    readonly allPlayers = this.players.asReadonly();&#10;    readonly getCurrentPlayer = this.curentPlayer.asReadonly();&#10;&#10;    addPlayer(player: Player): boolean {&#10;        this.players.set([...this.players(), player]);&#10;        this.curentPlayer.set(player);&#10;        return true;&#10;    }&#10;&#10;    isNicknameExists(nickname: string): boolean {&#10;        return this.players().some(player =&gt; player.nickname === nickname);&#10;    }&#10;}" />
              <option name="updatedContent" value="import {Injectable, signal} from '@angular/core';&#10;&#10;&#10;export interface Player{&#10;    firstName: string;&#10;    lastName: string;&#10;    nickname: string;&#10;    level: number;&#10;    averageAccuracy: number;&#10;}&#10;&#10;@Injectable({&#10;    providedIn: 'root'&#10;})&#10;export class PlayerService {&#10;    private players = signal&lt;Player[]&gt;([]);&#10;    private curentPlayer = signal&lt;Player | null&gt;(null);&#10;    readonly allPlayers = this.players.asReadonly();&#10;    readonly getCurrentPlayer = this.curentPlayer.asReadonly();&#10;&#10;    addPlayer(player: Player): boolean {&#10;        this.players.set([...this.players(), player]);&#10;        this.curentPlayer.set(player);&#10;        return true;&#10;    }&#10;&#10;    isNicknameExists(nickname: string): boolean {&#10;        return this.players().some(player =&gt; player.nickname === nickname);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/registration.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/registration.component.ts" />
              <option name="originalContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService } from '../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule],&#10;    templateUrl: './registration.html',&#10;    styleUrls: ['../game/playground.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            firstName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value;&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Нікнейм вже існує!');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            this.playerService.addPlayer({&#10;                firstName: formData.firstName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            });&#10;&#10;            this.successMessage.set('Реєстрація успішна! Переходимо до гри...');&#10;            this.errorMessage.set('');&#10;&#10;            setTimeout(() =&gt; {&#10;                this.router.navigate(['/game']);&#10;            }, 1000);&#10;        } else {&#10;            this.errorMessage.set('Заповніть всі поля правильно!');&#10;            this.successMessage.set('');&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;}" />
              <option name="updatedContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService, Player } from '../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule],&#10;    templateUrl: './registration.html',&#10;    styleUrls: ['../game/playground.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            firstName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value as {&#10;                firstName: string;&#10;                lastName: string;&#10;                nickname: string;&#10;            };&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Нікнейм вже існує!');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            this.playerService.addPlayer({&#10;                firstName: formData.firstName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            });&#10;&#10;            this.successMessage.set('Реєстрація успішна! Переходимо до гри...');&#10;            this.errorMessage.set('');&#10;&#10;            setTimeout(() =&gt; {&#10;                this.router.navigate(['/game']);&#10;            }, 1000);&#10;        } else {&#10;            this.errorMessage.set('Заповніть всі поля правильно!');&#10;            this.successMessage.set('');&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>