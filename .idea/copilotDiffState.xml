<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;angular.dev&quot;,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;ng&quot;: &quot;ng&quot;,&#10;    &quot;start&quot;: &quot;NG_BUILD_PARALLEL_TS=0 ng serve&quot;,&#10;    &quot;build&quot;: &quot;ng build&quot;,&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;&#10;  },&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@angular/animations&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/cdk&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/common&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/compiler&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/core&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/forms&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/material&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/platform-browser&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^18.2.13&quot;,&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#10;    &quot;zone.js&quot;: &quot;~0.14.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@angular/build&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/cli&quot;: &quot;^18.2.13&quot;,&#10;    &quot;@angular/compiler-cli&quot;: &quot;^18.2.13&quot;,&#10;    &quot;typescript&quot;: &quot;~5.5.0&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;name&quot;: &quot;angular.dev&quot;,&#13;&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#13;&#10;  &quot;scripts&quot;: {&#13;&#10;    &quot;ng&quot;: &quot;ng&quot;,&#13;&#10;    &quot;start&quot;: &quot;NG_BUILD_PARALLEL_TS=0 ng serve&quot;,&#13;&#10;    &quot;build&quot;: &quot;ng build&quot;,&#13;&#10;    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;&#13;&#10;  },&#13;&#10;  &quot;private&quot;: true,&#13;&#10;  &quot;dependencies&quot;: {&#13;&#10;    &quot;@angular/animations&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/cdk&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/common&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/compiler&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/core&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/forms&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/material&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/platform-browser&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/platform-browser-dynamic&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/router&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;rxjs&quot;: &quot;~7.8.0&quot;,&#13;&#10;    &quot;tslib&quot;: &quot;^2.3.0&quot;,&#13;&#10;    &quot;zone.js&quot;: &quot;~0.14.0&quot;&#13;&#10;  },&#13;&#10;  &quot;devDependencies&quot;: {&#13;&#10;    &quot;@angular/build&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/cli&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;@angular/compiler-cli&quot;: &quot;^18.2.13&quot;,&#13;&#10;    &quot;typescript&quot;: &quot;~5.5.0&quot;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Service/player.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Service/player.service.ts" />
              <option name="originalContent" value="import {Injectable, signal} from '@angular/core';&#10;&#10;&#10;export interface Player{&#10;    fistName: string;&#10;    lastName: string;&#10;    nickname: string;&#10;    level: number;&#10;    averageAccuracy: number;&#10;}&#10;&#10;@Injectable({&#10;    providedIn: 'root'&#10;})&#10;export class PlayerService {&#10;    private players = signal&lt;Player[]&gt;([]);&#10;    private curentPlayer = signal&lt;Player | null&gt;(null);&#10;    readonly allPlayers = this.players.asReadonly();&#10;    readonly getCurrentPlayer = this.curentPlayer.asReadonly();&#10;&#10;    addPlayer(player: Player): boolean {&#10;        this.players.set([...this.players(), player]);&#10;        this.curentPlayer.set(player);&#10;        return true;&#10;    }&#10;&#10;    isNicknameExists(nickname: string): boolean {&#10;        return this.players().some(player =&gt; player.nickname === nickname);&#10;    }&#10;}" />
              <option name="updatedContent" value="import {Injectable, signal} from '@angular/core';&#10;&#10;&#10;export interface Player{&#10;    fistName: string;&#10;    lastName: string;&#10;    nickname: string;&#10;    level: number;&#10;    averageAccuracy: number;&#10;}&#10;&#10;@Injectable({&#10;    providedIn: 'root'&#10;})&#10;export class PlayerService {&#10;    private players = signal&lt;Player[]&gt;([]);&#10;    private curentPlayer = signal&lt;Player | null&gt;(null);&#10;    readonly allPlayers = this.players.asReadonly();&#10;    readonly getCurrentPlayer = this.curentPlayer.asReadonly();&#10;&#10;    addPlayer(player: Player): boolean {&#10;        this.players.set([...this.players(), player]);&#10;        this.curentPlayer.set(player);&#10;        return true;&#10;    }&#10;&#10;    isNicknameExists(nickname: string): boolean {&#10;        return this.players().some(player =&gt; player.nickname === nickname);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app-module.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app-module.ts" />
              <option name="originalContent" value="import { BrowserModule } from '@angular/platform-browser';&#10;import { NgModule } from '@angular/core';&#10;import { TaskNoteComponent } from './task-note/task-note.component';&#10;import { PlaygroundComponent } from './game/PlaygroundComponent';&#10;import { A11yModule } from '@angular/cdk/a11y';&#10;import { MatSlideToggleModule } from '@angular/material/slide-toggle';&#10;import { CommonModule } from '@angular/common';&#10;&#10;@NgModule({&#10;  declarations: [PlaygroundComponent, TaskNoteComponent],&#10;  imports: [BrowserModule, CommonModule, MatSlideToggleModule, A11yModule],&#10;  providers: [],&#10;  bootstrap: [PlaygroundComponent],&#10;})&#10;export class AppModule {}&#10;" />
              <option name="updatedContent" value="import { BrowserModule } from '@angular/platform-browser';&#13;&#10;import { NgModule } from '@angular/core';&#13;&#10;import { TaskNoteComponent } from './task-note/task-note.component';&#13;&#10;import { PlaygroundComponent } from './game/PlaygroundComponent';&#13;&#10;import { A11yModule } from '@angular/cdk/a11y';&#13;&#10;import { MatSlideToggleModule } from '@angular/material/slide-toggle';&#13;&#10;import { CommonModule } from '@angular/common';&#13;&#10;&#13;&#10;@NgModule({&#13;&#10;  declarations: [PlaygroundComponent, TaskNoteComponent],&#13;&#10;  imports: [BrowserModule, CommonModule, MatSlideToggleModule, A11yModule],&#13;&#10;  providers: [],&#13;&#10;  bootstrap: [PlaygroundComponent],&#13;&#10;  exports: [TaskNoteComponent],&#13;&#10;})&#13;&#10;export class AppModule {}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/Leaderboard/scores.component.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/Leaderboard/scores.component.css" />
              <option name="originalContent" value=".scores-container {&#10;  width: 100%;&#10;  max-width: 700px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  animation: slideUp 0.8s ease-out;&#10;}&#10;&#10;.scores-title {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 1.5rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.scores-content {&#10;  width: 100%;&#10;}&#10;&#10;.scores-header {&#10;  display: grid;&#10;  grid-template-columns: 100px 1fr 120px 100px 150px;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  background: linear-gradient(135deg, #f8f9fa, #e9ecef);&#10;  border-radius: 12px;&#10;  font-weight: 600;&#10;  color: #495057;&#10;  margin-bottom: 0.5rem;&#10;  text-align: center;&#10;  font-size: 0.9rem;&#10;}&#10;&#10;.scores-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.scores-item {&#10;  display: grid;&#10;  grid-template-columns: 100px 1fr 120px 100px 150px;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  background: rgba(255, 255, 255, 0.8);&#10;  border-radius: 12px;&#10;  border: 2px solid transparent;&#10;  transition: all 0.3s ease;&#10;  align-items: center;&#10;  text-align: center;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.scores-item::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  width: 4px;&#10;  height: 100%;&#10;  background: #95a5a6;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.scores-item:hover {&#10;  transform: translateY(-2px);&#10;  border-color: #667eea;&#10;  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);&#10;}&#10;&#10;/* Rank-specific styles */&#10;.scores-item.rank-1 {&#10;  background: linear-gradient(135deg, #ffd700, #ffed4e);&#10;  color: #8b4513;&#10;  font-weight: 700;&#10;  border-color: #ffd700;&#10;}&#10;&#10;.scores-item.rank-1::before {&#10;  background: linear-gradient(180deg, #ffd700, #ff6b35);&#10;  width: 6px;&#10;}&#10;&#10;.scores-item.rank-2 {&#10;  background: linear-gradient(135deg, #c0c0c0, #e6e6e6);&#10;  color: #4a4a4a;&#10;  font-weight: 600;&#10;  border-color: #c0c0c0;&#10;}&#10;&#10;.scores-item.rank-2::before {&#10;  background: linear-gradient(180deg, #c0c0c0, #95a5a6);&#10;  width: 5px;&#10;}&#10;&#10;.scores-item.rank-3 {&#10;  background: linear-gradient(135deg, #cd7f32, #deb887);&#10;  color: #654321;&#10;  font-weight: 600;&#10;  border-color: #cd7f32;&#10;}&#10;&#10;.scores-item.rank-3::before {&#10;  background: linear-gradient(180deg, #cd7f32, #a0522d);&#10;  width: 5px;&#10;}&#10;&#10;.scores-item.top-5 {&#10;  background: linear-gradient(135deg, #e8f5e8, #f0f8ff);&#10;  border-color: #27ae60;&#10;}&#10;&#10;.scores-item.top-5::before {&#10;  background: #27ae60;&#10;}&#10;&#10;.rank {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.3rem;&#10;  font-weight: 700;&#10;}&#10;&#10;.rank-number {&#10;  font-size: 1.2rem;&#10;  min-width: 20px;&#10;}&#10;&#10;.rank-icon {&#10;  font-size: 1.1rem;&#10;}&#10;&#10;.rank-medal {&#10;  font-size: 1.3rem;&#10;}&#10;&#10;.player-name {&#10;  font-weight: 600;&#10;  font-size: 1.1rem;&#10;  text-align: left;&#10;  color: #2c3e50;&#10;}&#10;&#10;.player-level {&#10;  font-weight: 500;&#10;  color: #667eea;&#10;  font-size: 0.95rem;&#10;}&#10;&#10;.player-accuracy {&#10;  font-weight: 700;&#10;  color: #27ae60;&#10;  font-size: 1.1rem;&#10;}&#10;&#10;.player-status {&#10;  font-size: 0.85rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.status-champion {&#10;  color: #f39c12;&#10;  background: rgba(243, 156, 18, 0.1);&#10;  padding: 0.3rem 0.6rem;&#10;  border-radius: 15px;&#10;  border: 1px solid rgba(243, 156, 18, 0.3);&#10;}&#10;&#10;.status-runner-up {&#10;  color: #95a5a6;&#10;  background: rgba(149, 165, 166, 0.1);&#10;  padding: 0.3rem 0.6rem;&#10;  border-radius: 15px;&#10;  border: 1px solid rgba(149, 165, 166, 0.3);&#10;}&#10;&#10;.status-third {&#10;  color: #d35400;&#10;  background: rgba(211, 84, 0, 0.1);&#10;  padding: 0.3rem 0.6rem;&#10;  border-radius: 15px;&#10;  border: 1px solid rgba(211, 84, 0, 0.3);&#10;}&#10;&#10;.status-top {&#10;  color: #27ae60;&#10;  background: rgba(39, 174, 96, 0.1);&#10;  padding: 0.3rem 0.6rem;&#10;  border-radius: 15px;&#10;  border: 1px solid rgba(39, 174, 96, 0.3);&#10;}&#10;&#10;.status-good {&#10;  color: #3498db;&#10;  background: rgba(52, 152, 219, 0.1);&#10;  padding: 0.3rem 0.6rem;&#10;  border-radius: 15px;&#10;  border: 1px solid rgba(52, 152, 219, 0.3);&#10;}&#10;&#10;.no-scores {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: 4rem 2rem;&#10;  text-align: center;&#10;  color: #6c757d;&#10;}&#10;&#10;.no-scores-icon {&#10;  font-size: 4rem;&#10;  margin-bottom: 1rem;&#10;  opacity: 0.7;&#10;}&#10;&#10;.no-scores-title {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  margin-bottom: 0.5rem;&#10;  color: #495057;&#10;}&#10;&#10;.no-scores-subtitle {&#10;  font-size: 1rem;&#10;  color: #adb5bd;&#10;  font-style: italic;&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(30px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .scores-container {&#10;    padding: 1.5rem;&#10;    max-width: 100%;&#10;  }&#10;  &#10;  .scores-header,&#10;  .scores-item {&#10;    grid-template-columns: 60px 1fr 80px 80px;&#10;    gap: 0.5rem;&#10;    font-size: 0.8rem;&#10;  }&#10;  &#10;  .scores-header .status-header,&#10;  .scores-item .player-status {&#10;    display: none;&#10;  }&#10;  &#10;  .scores-title {&#10;    font-size: 1.6rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .scores-header,&#10;  .scores-item {&#10;    grid-template-columns: 50px 1fr 60px;&#10;    gap: 0.3rem;&#10;  }&#10;  &#10;  .scores-header .level-header,&#10;  .scores-item .player-level {&#10;    display: none;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".scores-container {&#10;  width: 100%;&#10;  max-width: 700px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  animation: slideUp 0.8s ease-out;&#10;}&#10;&#10;.scores-title {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 1.5rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.scores-content {&#10;  width: 100%;&#10;}&#10;&#10;.scores-table {&#10;  width: 100%;&#10;  border-collapse: collapse;&#10;  border-radius: 12px;&#10;  overflow: hidden;&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.scores-header {&#10;  background: linear-gradient(135deg, #f8f9fa, #e9ecef);&#10;}&#10;&#10;.scores-header th {&#10;  padding: 1rem;&#10;  font-weight: 600;&#10;  color: #495057;&#10;  text-align: left;&#10;  border-bottom: 2px solid #dee2e6;&#10;}&#10;&#10;.scores-list .scores-item {&#10;  transition: all 0.3s ease;&#10;  border-bottom: 1px solid #f1f3f4;&#10;}&#10;&#10;.scores-list .scores-item:hover {&#10;  background-color: #f8f9fa;&#10;  transform: translateX(5px);&#10;}&#10;&#10;.scores-list .scores-item:last-child {&#10;  border-bottom: none;&#10;}&#10;&#10;.scores-item td {&#10;  padding: 1rem;&#10;  color: #2c3e50;&#10;}&#10;&#10;.player-nickname {&#10;  font-weight: 600;&#10;  color: #667eea;&#10;  font-size: 1.1rem;&#10;}&#10;&#10;.player-fullname {&#10;  color: #495057;&#10;  font-weight: 500;&#10;}&#10;&#10;.player-level {&#10;  color: #6c757d;&#10;  text-align: center;&#10;}&#10;&#10;.player-accuracy {&#10;  font-weight: 600;&#10;  color: #27ae60;&#10;  text-align: center;&#10;}&#10;&#10;.no-scores {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: 4rem 2rem;&#10;  text-align: center;&#10;  color: #6c757d;&#10;}&#10;&#10;.no-scores-icon {&#10;  font-size: 4rem;&#10;  margin-bottom: 1rem;&#10;  opacity: 0.7;&#10;}&#10;&#10;.no-scores-title {&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;  margin-bottom: 0.5rem;&#10;  color: #495057;&#10;}&#10;&#10;.no-scores-subtitle {&#10;  font-size: 1rem;&#10;  color: #adb5bd;&#10;  font-style: italic;&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(30px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .scores-container {&#10;    padding: 1.5rem;&#10;    max-width: 100%;&#10;  }&#10;  &#10;  .scores-header th,&#10;  .scores-item td {&#10;    padding: 0.8rem 0.5rem;&#10;    font-size: 0.9rem;&#10;  }&#10;  &#10;  .scores-title {&#10;    font-size: 1.6rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .scores-header .name-header,&#10;  .scores-item .player-fullname {&#10;    display: none;&#10;  }&#10;  &#10;  .scores-header th,&#10;  .scores-item td {&#10;    padding: 0.6rem 0.3rem;&#10;    font-size: 0.8rem;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/Leaderboard/scores.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/Leaderboard/scores.component.html" />
              <option name="originalContent" value="&lt;div class=&quot;scores-container&quot;&gt;&#10;    &lt;h2 class=&quot;scores-title&quot;&gt; Таблиця учасників&lt;/h2&gt;&#10;    &#10;    &lt;div class=&quot;scores-content&quot;&gt;&#10;        &lt;table class=&quot;scores-table&quot;&gt;&#10;            &lt;thead class=&quot;scores-header&quot;&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th class=&quot;player-header&quot;&gt;Гравець&lt;/th&gt;&#10;                    &lt;th class=&quot;name-header&quot;&gt;Ім'я&lt;/th&gt;&#10;                    &lt;th class=&quot;level-header&quot;&gt;Рівень&lt;/th&gt;&#10;                    &lt;th class=&quot;accuracy-header&quot;&gt;Точність&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody class=&quot;scores-list&quot;&gt;&#10;                &lt;tr class=&quot;scores-item&quot; *ngFor=&quot;let player of allPlayers()&quot;&gt;&#10;                    &lt;td class=&quot;player-nickname&quot;&gt;{{ player.nickname }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-fullname&quot;&gt;{{ player.fistName }} {{ player.lastName }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-level&quot;&gt;{{ player.level }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-accuracy&quot;&gt;{{ player.averageAccuracy.toFixed(1) }}%&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;&#10;        &lt;div class=&quot;no-scores&quot; *ngIf=&quot;allPlayers().length === 0&quot;&gt;&#10;            &lt;div class=&quot;no-scores-icon&quot;&gt;‍♂️&lt;/div&gt;&#10;            &lt;div class=&quot;no-scores-title&quot;&gt;Тут поки що пусто&lt;/div&gt;&#10;            &lt;div class=&quot;no-scores-subtitle&quot;&gt;Стань першим, хто зареєструється!&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
              <option name="updatedContent" value="&lt;div class=&quot;scores-container&quot;&gt;&#10;    &lt;h2 class=&quot;scores-title&quot;&gt; Таблиця учасників&lt;/h2&gt;&#10;    &#10;    &lt;div class=&quot;scores-content&quot;&gt;&#10;        &lt;table class=&quot;scores-table&quot;&gt;&#10;            &lt;thead class=&quot;scores-header&quot;&gt;&#10;                &lt;tr&gt;&#10;                    &lt;th class=&quot;player-header&quot;&gt;Гравець&lt;/th&gt;&#10;                    &lt;th class=&quot;name-header&quot;&gt;Ім'я&lt;/th&gt;&#10;                    &lt;th class=&quot;level-header&quot;&gt;Рівень&lt;/th&gt;&#10;                    &lt;th class=&quot;accuracy-header&quot;&gt;Точність&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/thead&gt;&#10;            &lt;tbody class=&quot;scores-list&quot;&gt;&#10;                &lt;tr class=&quot;scores-item&quot; *ngFor=&quot;let player of allPlayers()&quot;&gt;&#10;                    &lt;td class=&quot;player-nickname&quot;&gt;{{ player.nickname }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-fullname&quot;&gt;{{ player.fistName }} {{ player.lastName }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-level&quot;&gt;{{ player.level }}&lt;/td&gt;&#10;                    &lt;td class=&quot;player-accuracy&quot;&gt;{{ player.averageAccuracy.toFixed(1) }}%&lt;/td&gt;&#10;                &lt;/tr&gt;&#10;            &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;&#10;        &lt;div class=&quot;no-scores&quot; *ngIf=&quot;allPlayers().length === 0&quot;&gt;&#10;            &lt;div class=&quot;no-scores-icon&quot;&gt;‍♂️&lt;/div&gt;&#10;            &lt;div class=&quot;no-scores-title&quot;&gt;Тут поки що пусто&lt;/div&gt;&#10;            &lt;div class=&quot;no-scores-subtitle&quot;&gt;Стань першим, хто зареєструється!&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/Leaderboard/scores.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/Leaderboard/scores.component.ts" />
              <option name="originalContent" value="import { Component, inject, computed } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { PlayerService, Player } from '../../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-scores',&#10;    standalone: true,&#10;    imports: [CommonModule],&#10;    templateUrl: './scores.component.html',&#10;    styleUrls: ['./scores.component.css']&#10;})&#10;export class ScoresComponent {&#10;    private playerService = inject(PlayerService);&#10;&#10;    allPlayers = computed(() =&gt; {&#10;        return this.playerService.allPlayers()&#10;            .sort((a, b) =&gt; {&#10;                return a.nickname.localeCompare(b.nickname);&#10;            });&#10;    });&#10;}&#10;" />
              <option name="updatedContent" value="import { Component, inject, computed } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;import { PlayerService, Player } from '../../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-scores',&#10;    standalone: true,&#10;    imports: [CommonModule],&#10;    templateUrl: './scores.component.html',&#10;    styleUrls: ['./scores.component.css']&#10;})&#10;export class ScoresComponent {&#10;    private playerService = inject(PlayerService);&#10;&#10;    allPlayers = computed(() =&gt; {&#10;        return this.playerService.allPlayers()&#10;            .sort((a, b) =&gt; a.nickname.localeCompare(b.nickname));&#10;    });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/reg/registration.component.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/reg/registration.component.css" />
              <option name="originalContent" value=".wrapper {&#10;  min-height: 100vh;&#10;  width: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  padding: 20px;&#10;  box-sizing: border-box;&#10;  gap: 2rem;&#10;}&#10;&#10;.registration-container {&#10;  width: 100%;&#10;  max-width: 450px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 3rem 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  animation: slideUp 0.6s ease-out;&#10;}&#10;&#10;/* Leaderboard Styles */&#10;.leaderboard-container {&#10;  width: 100%;&#10;  max-width: 600px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  animation: slideUp 0.8s ease-out;&#10;}&#10;&#10;.leaderboard-title {&#10;  font-size: 1.8rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 1.5rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.leaderboard-content {&#10;  width: 100%;&#10;}&#10;&#10;.leaderboard-header {&#10;  display: grid;&#10;  grid-template-columns: 80px 1fr 80px 100px;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  background: linear-gradient(135deg, #f8f9fa, #e9ecef);&#10;  border-radius: 12px;&#10;  font-weight: 600;&#10;  color: #495057;&#10;  margin-bottom: 0.5rem;&#10;  text-align: center;&#10;}&#10;&#10;.leaderboard-list {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.leaderboard-item {&#10;  display: grid;&#10;  grid-template-columns: 80px 1fr 80px 100px;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  background: rgba(255, 255, 255, 0.8);&#10;  border-radius: 12px;&#10;  border: 2px solid transparent;&#10;  transition: all 0.3s ease;&#10;  align-items: center;&#10;  text-align: center;&#10;}&#10;&#10;.leaderboard-item:hover {&#10;  transform: translateY(-2px);&#10;  border-color: #667eea;&#10;  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);&#10;}&#10;&#10;.leaderboard-item:nth-child(1) {&#10;  background: linear-gradient(135deg, #ffd700, #ffed4e);&#10;  color: #8b4513;&#10;  font-weight: 700;&#10;}&#10;&#10;.leaderboard-item:nth-child(2) {&#10;  background: linear-gradient(135deg, #c0c0c0, #e6e6e6);&#10;  color: #4a4a4a;&#10;  font-weight: 600;&#10;}&#10;&#10;.leaderboard-item:nth-child(3) {&#10;  background: linear-gradient(135deg, #cd7f32, #deb887);&#10;  color: #654321;&#10;  font-weight: 600;&#10;}&#10;&#10;.rank {&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.5rem;&#10;  font-weight: 700;&#10;}&#10;&#10;.rank-number {&#10;  font-size: 1.1rem;&#10;}&#10;&#10;.rank-medal {&#10;  font-size: 1.2rem;&#10;}&#10;&#10;.player-name {&#10;  font-weight: 600;&#10;  font-size: 1rem;&#10;  text-align: left;&#10;}&#10;&#10;.player-level {&#10;  font-weight: 500;&#10;  color: #667eea;&#10;}&#10;&#10;.player-accuracy {&#10;  font-weight: 600;&#10;  color: #27ae60;&#10;}&#10;&#10;.no-players {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  padding: 3rem 2rem;&#10;  text-align: center;&#10;  color: #6c757d;&#10;  font-style: italic;&#10;}&#10;&#10;.no-players span:first-child {&#10;  font-size: 1.2rem;&#10;  margin-bottom: 0.5rem;&#10;}&#10;&#10;.no-players span:last-child {&#10;  font-size: 1rem;&#10;  color: #adb5bd;&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(30px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.registration-title {&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 2rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.form-group {&#10;  width: 100%;&#10;  margin-bottom: 1.5rem;&#10;  position: relative;&#10;}&#10;&#10;.form-label {&#10;  display: block;&#10;  font-weight: 600;&#10;  margin-bottom: 0.5rem;&#10;  color: #34495e;&#10;  font-size: 1rem;&#10;  transition: color 0.3s ease;&#10;}&#10;&#10;.form-input {&#10;  width: 100%;&#10;  padding: 1rem 1.25rem;&#10;  border: 2px solid #e8ecf0;&#10;  border-radius: 12px;&#10;  font-size: 1rem;&#10;  transition: all 0.3s ease;&#10;  box-sizing: border-box;&#10;  background: #fff;&#10;  font-family: inherit;&#10;}&#10;&#10;.form-input:focus {&#10;  outline: none;&#10;  border-color: #667eea;&#10;  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.form-input:hover {&#10;  border-color: #bdc3c7;&#10;}&#10;&#10;.form-input.invalid {&#10;  border-color: #e74c3c;&#10;  animation: shake 0.3s ease-in-out;&#10;}&#10;&#10;@keyframes shake {&#10;  0%, 100% { transform: translateX(0); }&#10;  25% { transform: translateX(-5px); }&#10;  75% { transform: translateX(5px); }&#10;}&#10;&#10;.form-input::placeholder {&#10;  color: #95a5a6;&#10;  font-style: italic;&#10;}&#10;&#10;.gradient-button {&#10;  text-decoration: none;&#10;  color: #2c3e50;&#10;  margin: 8px;&#10;  position: relative;&#10;  cursor: pointer;&#10;  font-size: 1rem;&#10;  border: none;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  height: fit-content;&#10;  padding: 0;&#10;  transition: transform 0.2s ease;&#10;  font-family: inherit;&#10;}&#10;&#10;.gradient-button:hover {&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.gradient-button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;.gradient-button span:nth-of-type(1) {&#10;  position: absolute;&#10;  border-radius: 12px;&#10;  height: 100%;&#10;  width: 100%;&#10;  left: 0;&#10;  top: 0;&#10;  background: linear-gradient(&#10;    135deg,&#10;    #667eea 0%,&#10;    #764ba2 50%,&#10;    #f093fb 100%&#10;  );&#10;}&#10;&#10;.gradient-button span:nth-of-type(2) {&#10;  position: relative;&#10;  padding: 1rem 1.5rem;&#10;  background: white;&#10;  margin: 2px;&#10;  border-radius: 10px;&#10;  transition: all 0.3s ease;&#10;  opacity: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-weight: 600;&#10;}&#10;&#10;.gradient-button:enabled:hover span:nth-of-type(2) {&#10;  opacity: 0.9;&#10;  background: #f8f9fa;&#10;}&#10;&#10;.gradient-button:disabled {&#10;  cursor: not-allowed;&#10;  opacity: 0.6;&#10;  transform: none;&#10;}&#10;&#10;.gradient-button:disabled span:nth-of-type(2) {&#10;  color: #95a5a6;&#10;  background: #ecf0f1;&#10;}&#10;&#10;.button-container {&#10;  display: flex;&#10;  gap: 1rem;&#10;  width: 100%;&#10;  margin-top: 1.5rem;&#10;}&#10;&#10;.success-message {&#10;  color: #27ae60;&#10;  background: linear-gradient(135deg, #d5f4e6, #a8e6cf);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(39, 174, 96, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;.error-message {&#10;  color: #e74c3c;&#10;  background: linear-gradient(135deg, #fdf2f2, #fadbd8);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(231, 76, 60, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(10px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.form-validation-error {&#10;  color: #e74c3c;&#10;  font-size: 0.875rem;&#10;  margin-top: 0.5rem;&#10;  display: block;&#10;  font-weight: 500;&#10;  animation: fadeIn 0.3s ease-out;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .wrapper {&#10;    padding: 10px;&#10;  }&#10;  &#10;  .registration-container {&#10;    padding: 2rem 1.5rem;&#10;    max-width: 100%;&#10;  }&#10;  &#10;  .registration-title {&#10;    font-size: 1.8rem;&#10;  }&#10;  &#10;  .button-container {&#10;    flex-direction: column;&#10;    gap: 0.5rem;&#10;  }&#10;}&#10;&#10;/* Dark mode support */&#10;@media (prefers-color-scheme: dark) {&#10;  .registration-container {&#10;    background: rgba(44, 62, 80, 0.95);&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .registration-title {&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-label {&#10;    color: #bdc3c7;&#10;  }&#10;  &#10;  .form-input {&#10;    background: #34495e;&#10;    border-color: #5d6d7e;&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-input::placeholder {&#10;    color: #85929e;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".wrapper {&#10;  min-height: 100vh;&#10;  width: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: center;&#10;  align-items: center;&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  padding: 20px;&#10;  box-sizing: border-box;&#10;  gap: 2rem;&#10;}&#10;&#10;.registration-container {&#10;  width: 100%;&#10;  max-width: 450px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 3rem 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  animation: slideUp 0.6s ease-out;&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(30px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.registration-title {&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 2rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.form-group {&#10;  width: 100%;&#10;  margin-bottom: 1.5rem;&#10;  position: relative;&#10;}&#10;&#10;.form-label {&#10;  display: block;&#10;  font-weight: 600;&#10;  margin-bottom: 0.5rem;&#10;  color: #34495e;&#10;  font-size: 1rem;&#10;  transition: color 0.3s ease;&#10;}&#10;&#10;.form-input {&#10;  width: 100%;&#10;  padding: 1rem 1.25rem;&#10;  border: 2px solid #e8ecf0;&#10;  border-radius: 12px;&#10;  font-size: 1rem;&#10;  transition: all 0.3s ease;&#10;  box-sizing: border-box;&#10;  background: #fff;&#10;  font-family: inherit;&#10;}&#10;&#10;.form-input:focus {&#10;  outline: none;&#10;  border-color: #667eea;&#10;  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.form-input:hover {&#10;  border-color: #bdc3c7;&#10;}&#10;&#10;.form-input.invalid {&#10;  border-color: #e74c3c;&#10;  animation: shake 0.3s ease-in-out;&#10;}&#10;&#10;@keyframes shake {&#10;  0%, 100% { transform: translateX(0); }&#10;  25% { transform: translateX(-5px); }&#10;  75% { transform: translateX(5px); }&#10;}&#10;&#10;.form-input::placeholder {&#10;  color: #95a5a6;&#10;  font-style: italic;&#10;}&#10;&#10;.gradient-button {&#10;  text-decoration: none;&#10;  color: #2c3e50;&#10;  margin: 8px;&#10;  position: relative;&#10;  cursor: pointer;&#10;  font-size: 1rem;&#10;  border: none;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  height: fit-content;&#10;  padding: 0;&#10;  transition: transform 0.2s ease;&#10;  font-family: inherit;&#10;}&#10;&#10;.gradient-button:hover {&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.gradient-button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;.gradient-button span:nth-of-type(1) {&#10;  position: absolute;&#10;  border-radius: 12px;&#10;  height: 100%;&#10;  width: 100%;&#10;  left: 0;&#10;  top: 0;&#10;  background: linear-gradient(&#10;    135deg,&#10;    #667eea 0%,&#10;    #764ba2 50%,&#10;    #f093fb 100%&#10;  );&#10;}&#10;&#10;.gradient-button span:nth-of-type(2) {&#10;  position: relative;&#10;  padding: 1rem 1.5rem;&#10;  background: white;&#10;  margin: 2px;&#10;  border-radius: 10px;&#10;  transition: all 0.3s ease;&#10;  opacity: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-weight: 600;&#10;}&#10;&#10;.gradient-button:enabled:hover span:nth-of-type(2) {&#10;  opacity: 0.9;&#10;  background: #f8f9fa;&#10;}&#10;&#10;.gradient-button:disabled {&#10;  cursor: not-allowed;&#10;  opacity: 0.6;&#10;  transform: none;&#10;}&#10;&#10;.gradient-button:disabled span:nth-of-type(2) {&#10;  color: #95a5a6;&#10;  background: #ecf0f1;&#10;}&#10;&#10;.button-container {&#10;  display: flex;&#10;  gap: 1rem;&#10;  width: 100%;&#10;  margin-top: 1.5rem;&#10;}&#10;&#10;.success-message {&#10;  color: #27ae60;&#10;  background: linear-gradient(135deg, #d5f4e6, #a8e6cf);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(39, 174, 96, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;.error-message {&#10;  color: #e74c3c;&#10;  background: linear-gradient(135deg, #fdf2f2, #fadbd8);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(231, 76, 60, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(10px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.form-validation-error {&#10;  color: #e74c3c;&#10;  font-size: 0.875rem;&#10;  margin-top: 0.5rem;&#10;  display: block;&#10;  font-weight: 500;&#10;  animation: fadeIn 0.3s ease-out;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .wrapper {&#10;    padding: 10px;&#10;  }&#10;  &#10;  .registration-container {&#10;    padding: 2rem 1.5rem;&#10;    max-width: 100%;&#10;  }&#10;  &#10;  .registration-title {&#10;    font-size: 1.8rem;&#10;  }&#10;  &#10;  .button-container {&#10;    flex-direction: column;&#10;    gap: 0.5rem;&#10;  }&#10;}&#10;&#10;/* Dark mode support */&#10;@media (prefers-color-scheme: dark) {&#10;  .registration-container {&#10;    background: rgba(44, 62, 80, 0.95);&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .registration-title {&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-label {&#10;    color: #bdc3c7;&#10;  }&#10;  &#10;  .form-input {&#10;    background: #34495e;&#10;    border-color: #5d6d7e;&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-input::placeholder {&#10;    color: #85929e;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/reg/registration.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/reg/registration.component.html" />
              <option name="originalContent" value="&lt;div class=&quot;wrapper&quot;&gt;&#10;    &lt;div class=&quot;registration-container&quot;&gt;&#10;        &lt;h1 class=&quot;registration-title&quot;&gt; Реєстрація гравця&lt;/h1&gt;&#10;&#10;        &lt;form [formGroup]=&quot;fg&quot; (ngSubmit)=&quot;startGame()&quot;&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;Ім'я:&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;fistName&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&#10;                        placeholder=&quot;Введіть ваше ім'я&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&gt;&#10;                    Ім'я повинно містити мінімум 2 символи&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;Прізвище:&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;lastName&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&#10;                        placeholder=&quot;Введіть ваше прізвище&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&gt;&#10;                    Прізвище повинно містити мінімум 2 символи&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;Нікнейм:&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;nickname&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&#10;                        placeholder=&quot;Введіть унікальний нікнейм&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&gt;&#10;                    Нікнейм повинен містити мінімум 3 символи&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;success-message&quot; *ngIf=&quot;successMessage()&quot;&gt;&#10;                {{ successMessage() }}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;error-message&quot; *ngIf=&quot;errorMessage()&quot;&gt;&#10;                {{ errorMessage() }}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;button-container&quot;&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;gradient-button&quot; (click)=&quot;clear()&quot;&gt;&#10;                    &lt;span&gt;&lt;/span&gt;&#10;                    &lt;span&gt;Очистити&lt;/span&gt;&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;gradient-button&quot; [disabled]=&quot;fg.invalid&quot;&gt;&#10;                    &lt;span&gt;&lt;/span&gt;&#10;                    &lt;span&gt;Почати гру&lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Таблиця Учасників --&gt;&#10;    &lt;app-scores&gt;&lt;/app-scores&gt;&#10;&lt;/div&gt;" />
              <option name="updatedContent" value="&lt;div class=&quot;wrapper&quot;&gt;&#10;    &lt;div class=&quot;registration-container&quot;&gt;&#10;        &lt;h1 class=&quot;registration-title&quot;&gt; Давай знайомитись!&lt;/h1&gt;&#10;&#10;        &lt;form [formGroup]=&quot;fg&quot; (ngSubmit)=&quot;startGame()&quot;&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;Як тебе звати?&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;fistName&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&#10;                        placeholder=&quot;Напиши своє ім'я&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&gt;&#10;                    Хм, здається ім'я занадто коротке (мінімум 2 букви)&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;А прізвище?&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;lastName&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&#10;                        placeholder=&quot;І прізвище теж&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&gt;&#10;                    Прізвище також має бути довше 2 букв&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label class=&quot;form-label&quot;&gt;Придумай собі крутий нікнейм!&lt;/label&gt;&#10;                &lt;input&#10;                        formControlName=&quot;nickname&quot;&#10;                        class=&quot;form-input&quot;&#10;                        [class.invalid]=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&#10;                        placeholder=&quot;Тут буде твій псевдонім&quot;&#10;                /&gt;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&gt;&#10;                    Нікнейм має бути довший (мінімум 3 символи)&#10;                &lt;/span&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;success-message&quot; *ngIf=&quot;successMessage()&quot;&gt;&#10;                {{ successMessage() }}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;error-message&quot; *ngIf=&quot;errorMessage()&quot;&gt;&#10;                {{ errorMessage() }}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;button-container&quot;&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;gradient-button&quot; (click)=&quot;clear()&quot;&gt;&#10;                    &lt;span&gt;&lt;/span&gt;&#10;                    &lt;span&gt;Очистити все&lt;/span&gt;&#10;                &lt;/button&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;gradient-button&quot; [disabled]=&quot;fg.invalid&quot;&gt;&#10;                    &lt;span&gt;&lt;/span&gt;&#10;                    &lt;span&gt;Поїхали грати! &lt;/span&gt;&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Таблиця Учасників --&gt;&#10;    &lt;app-scores&gt;&lt;/app-scores&gt;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/reg/registration.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/reg/registration.component.ts" />
              <option name="originalContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService, Player } from '../../Service/player.service';&#10;import { ScoresComponent } from '../Leaderboard/scores.component';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule, ScoresComponent],&#10;    templateUrl: './registration.component.html',&#10;    styleUrls: ['./registration.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            fistName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value as {&#10;                fistName: string;&#10;                lastName: string;&#10;                nickname: string;&#10;            };&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Нікнейм вже існує! Оберіть інший.');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            const newPlayer: Player = {&#10;                fistName: formData.fistName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            };&#10;&#10;            this.playerService.addPlayer(newPlayer);&#10;&#10;            this.successMessage.set('Реєстрація успішна! Переходимо до гри...');&#10;            this.errorMessage.set('');&#10;&#10;            setTimeout(() =&gt; {&#10;                this.router.navigate(['/game']);&#10;            }, 1500);&#10;        } else {&#10;            this.errorMessage.set('Будь ласка, заповніть всі поля правильно!');&#10;            this.successMessage.set('');&#10;            this.markAllFieldsAsTouched();&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;&#10;&#10;    private markAllFieldsAsTouched(): void {&#10;        Object.keys(this.fg.controls).forEach(key =&gt; {&#10;            this.fg.get(key)?.markAsTouched();&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService, Player } from '../../Service/player.service';&#10;import { ScoresComponent } from '../Leaderboard/scores.component';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule, ScoresComponent],&#10;    templateUrl: './registration.component.html',&#10;    styleUrls: ['./registration.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            fistName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value as {&#10;                fistName: string;&#10;                lastName: string;&#10;                nickname: string;&#10;            };&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Упс! Цей нікнейм вже зайнятий. Спробуй щось більш креативне!');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            const newPlayer: Player = {&#10;                fistName: formData.fistName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            };&#10;&#10;            this.playerService.addPlayer(newPlayer);&#10;&#10;            this.successMessage.set('Вітаю! Ти готовий до гри! Зараз запускаємо...');&#10;            this.errorMessage.set('');&#10;&#10;            setTimeout(() =&gt; {&#10;                this.router.navigate(['/game']);&#10;            }, 1500);&#10;        } else {&#10;            this.errorMessage.set('Гей, заповни всі поля! Без цього не зможемо тебе зареєструвати ');&#10;            this.successMessage.set('');&#10;            this.markAllFieldsAsTouched();&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;&#10;&#10;    private markAllFieldsAsTouched(): void {&#10;        Object.keys(this.fg.controls).forEach(key =&gt; {&#10;            this.fg.get(key)?.markAsTouched();&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/registration.component.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/registration.component.css" />
              <option name="originalContent" value=".wrapper {&#10;  height: 100vh;&#10;  width: 100%;&#10;  max-width: 1000px;&#10;  margin: auto;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;}&#10;&#10;.registration-container {&#10;  width: 100%;&#10;  max-width: 500px;&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 2rem;&#10;  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;}&#10;&#10;.registration-title {&#10;  font-size: 2rem;&#10;  font-weight: 600;&#10;  color: #333;&#10;  margin-bottom: 1.5rem;&#10;  text-align: center;&#10;}&#10;&#10;.form-group {&#10;  width: 100%;&#10;  margin-bottom: 1.5rem;&#10;}&#10;&#10;.form-label {&#10;  display: block;&#10;  font-weight: 500;&#10;  margin-bottom: 0.5rem;&#10;  color: #555;&#10;  font-size: 1rem;&#10;}&#10;&#10;.form-input {&#10;  width: 100%;&#10;  padding: 0.75rem 1rem;&#10;  border: 2px solid #e1e5e9;&#10;  border-radius: 8px;&#10;  font-size: 1rem;&#10;  transition: all 0.3s ease;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.form-input:focus {&#10;  outline: none;&#10;  border-color: #667eea;&#10;  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;}&#10;&#10;.form-input.invalid {&#10;  border-color: #e74c3c;&#10;}&#10;&#10;.gradient-button {&#10;  text-decoration: none;&#10;  color: black;&#10;  margin: 8px;&#10;  position: relative;&#10;  cursor: pointer;&#10;  font-size: 1rem;&#10;  border: none;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  height: fit-content;&#10;  padding-block: 0;&#10;  padding-inline: 0;&#10;}&#10;&#10;.gradient-button span:nth-of-type(1) {&#10;  position: absolute;&#10;  border-radius: 0.5rem;&#10;  height: 100%;&#10;  width: 100%;&#10;  left: 0;&#10;  top: 0;&#10;  background: linear-gradient(&#10;    90deg,&#10;    var(--orange-red) 0%,&#10;    var(--vivid-pink) 50%,&#10;    var(--electric-violet) 100%&#10;  );&#10;}&#10;&#10;.gradient-button span:nth-of-type(2) {&#10;  position: relative;&#10;  padding: 0.75rem 1rem;&#10;  background: white;&#10;  margin: 2px;&#10;  border-radius: 0.4rem;&#10;  transition: all 0.3s ease;&#10;  opacity: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;}&#10;&#10;.gradient-button:enabled:hover span:nth-of-type(2),&#10;.gradient-button:enabled:focus span:nth-of-type(2) {&#10;  opacity: 0.9;&#10;}&#10;&#10;.gradient-button:disabled {&#10;  cursor: not-allowed;&#10;  color: #969696;&#10;}&#10;&#10;.button-container {&#10;  display: flex;&#10;  gap: 1rem;&#10;  width: 100%;&#10;  margin-top: 1rem;&#10;}&#10;&#10;.success-message {&#10;  color: #27ae60;&#10;  background: #d5f4e6;&#10;  padding: 0.75rem;&#10;  border-radius: 6px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 500;&#10;}&#10;&#10;.error-message {&#10;  color: #e74c3c;&#10;  background: #fdf2f2;&#10;  padding: 0.75rem;&#10;  border-radius: 6px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 500;&#10;}&#10;&#10;.form-validation-error {&#10;  color: #e74c3c;&#10;  font-size: 0.875rem;&#10;  margin-top: 0.25rem;&#10;  display: block;&#10;}&#10;&#10;:root {&#10;  --orange-red: #ff6b35;&#10;  --vivid-pink: #f7931e;&#10;  --electric-violet: #9b59b6;&#10;}&#10;" />
              <option name="updatedContent" value=".wrapper {&#10;  min-height: 100vh;&#10;  width: 100%;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  padding: 20px;&#10;  box-sizing: border-box;&#10;}&#10;&#10;.registration-container {&#10;  width: 100%;&#10;  max-width: 450px;&#10;  background: rgba(255, 255, 255, 0.95);&#10;  backdrop-filter: blur(10px);&#10;  border-radius: 20px;&#10;  padding: 3rem 2rem;&#10;  box-shadow: &#10;    0 20px 40px rgba(0, 0, 0, 0.1),&#10;    0 0 0 1px rgba(255, 255, 255, 0.2);&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  animation: slideUp 0.6s ease-out;&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(30px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.registration-title {&#10;  font-size: 2.2rem;&#10;  font-weight: 700;&#10;  color: #2c3e50;&#10;  margin-bottom: 2rem;&#10;  text-align: center;&#10;  background: linear-gradient(45deg, #667eea, #764ba2);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;}&#10;&#10;.form-group {&#10;  width: 100%;&#10;  margin-bottom: 1.5rem;&#10;  position: relative;&#10;}&#10;&#10;.form-label {&#10;  display: block;&#10;  font-weight: 600;&#10;  margin-bottom: 0.5rem;&#10;  color: #34495e;&#10;  font-size: 1rem;&#10;  transition: color 0.3s ease;&#10;}&#10;&#10;.form-input {&#10;  width: 100%;&#10;  padding: 1rem 1.25rem;&#10;  border: 2px solid #e8ecf0;&#10;  border-radius: 12px;&#10;  font-size: 1rem;&#10;  transition: all 0.3s ease;&#10;  box-sizing: border-box;&#10;  background: #fff;&#10;  font-family: inherit;&#10;}&#10;&#10;.form-input:focus {&#10;  outline: none;&#10;  border-color: #667eea;&#10;  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.form-input:hover {&#10;  border-color: #bdc3c7;&#10;}&#10;&#10;.form-input.invalid {&#10;  border-color: #e74c3c;&#10;  animation: shake 0.3s ease-in-out;&#10;}&#10;&#10;@keyframes shake {&#10;  0%, 100% { transform: translateX(0); }&#10;  25% { transform: translateX(-5px); }&#10;  75% { transform: translateX(5px); }&#10;}&#10;&#10;.form-input::placeholder {&#10;  color: #95a5a6;&#10;  font-style: italic;&#10;}&#10;&#10;.gradient-button {&#10;  text-decoration: none;&#10;  color: #2c3e50;&#10;  margin: 8px;&#10;  position: relative;&#10;  cursor: pointer;&#10;  font-size: 1rem;&#10;  border: none;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  height: fit-content;&#10;  padding: 0;&#10;  transition: transform 0.2s ease;&#10;  font-family: inherit;&#10;}&#10;&#10;.gradient-button:hover {&#10;  transform: translateY(-2px);&#10;}&#10;&#10;.gradient-button:active {&#10;  transform: translateY(0);&#10;}&#10;&#10;.gradient-button span:nth-of-type(1) {&#10;  position: absolute;&#10;  border-radius: 12px;&#10;  height: 100%;&#10;  width: 100%;&#10;  left: 0;&#10;  top: 0;&#10;  background: linear-gradient(&#10;    135deg,&#10;    #667eea 0%,&#10;    #764ba2 50%,&#10;    #f093fb 100%&#10;  );&#10;}&#10;&#10;.gradient-button span:nth-of-type(2) {&#10;  position: relative;&#10;  padding: 1rem 1.5rem;&#10;  background: white;&#10;  margin: 2px;&#10;  border-radius: 10px;&#10;  transition: all 0.3s ease;&#10;  opacity: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-weight: 600;&#10;}&#10;&#10;.gradient-button:enabled:hover span:nth-of-type(2) {&#10;  opacity: 0.9;&#10;  background: #f8f9fa;&#10;}&#10;&#10;.gradient-button:disabled {&#10;  cursor: not-allowed;&#10;  opacity: 0.6;&#10;  transform: none;&#10;}&#10;&#10;.gradient-button:disabled span:nth-of-type(2) {&#10;  color: #95a5a6;&#10;  background: #ecf0f1;&#10;}&#10;&#10;.button-container {&#10;  display: flex;&#10;  gap: 1rem;&#10;  width: 100%;&#10;  margin-top: 1.5rem;&#10;}&#10;&#10;.success-message {&#10;  color: #27ae60;&#10;  background: linear-gradient(135deg, #d5f4e6, #a8e6cf);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(39, 174, 96, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;.error-message {&#10;  color: #e74c3c;&#10;  background: linear-gradient(135deg, #fdf2f2, #fadbd8);&#10;  padding: 1rem;&#10;  border-radius: 12px;&#10;  margin-top: 1rem;&#10;  text-align: center;&#10;  font-weight: 600;&#10;  width: 100%;&#10;  box-shadow: 0 4px 12px rgba(231, 76, 60, 0.2);&#10;  animation: fadeIn 0.5s ease-out;&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(10px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;.form-validation-error {&#10;  color: #e74c3c;&#10;  font-size: 0.875rem;&#10;  margin-top: 0.5rem;&#10;  display: block;&#10;  font-weight: 500;&#10;  animation: fadeIn 0.3s ease-out;&#10;}&#10;&#10;/* Responsive design */&#10;@media (max-width: 768px) {&#10;  .wrapper {&#10;    padding: 10px;&#10;  }&#10;  &#10;  .registration-container {&#10;    padding: 2rem 1.5rem;&#10;    max-width: 100%;&#10;  }&#10;  &#10;  .registration-title {&#10;    font-size: 1.8rem;&#10;  }&#10;  &#10;  .button-container {&#10;    flex-direction: column;&#10;    gap: 0.5rem;&#10;  }&#10;}&#10;&#10;/* Dark mode support */&#10;@media (prefers-color-scheme: dark) {&#10;  .registration-container {&#10;    background: rgba(44, 62, 80, 0.95);&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .registration-title {&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-label {&#10;    color: #bdc3c7;&#10;  }&#10;  &#10;  .form-input {&#10;    background: #34495e;&#10;    border-color: #5d6d7e;&#10;    color: #ecf0f1;&#10;  }&#10;  &#10;  .form-input::placeholder {&#10;    color: #85929e;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/registration.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/registration.component.ts" />
              <option name="originalContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService, Player } from '../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule],&#10;    templateUrl: './registration.html',&#10;    styleUrls: ['./registration.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            fistName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value as {&#10;                fistName: string;&#10;                lastName: string;&#10;                nickname: string;&#10;            };&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Нікнейм вже існує!');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            const newPlayer: Player = {&#10;                fistName: formData.fistName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            };&#10;&#10;            this.playerService.addPlayer(newPlayer);&#10;&#10;            this.successMessage.set('Реєстрація успішна! Переходимо до гри...');&#10;            this.errorMessage.set('');&#10;&#10;            // Instead of router navigation, you can emit an event or use another method&#10;            // setTimeout(() =&gt; {&#10;            //     this.router.navigate(['/game']);&#10;            // }, 1000);&#10;        } else {&#10;            this.errorMessage.set('Будь ласка, заповніть всі поля правильно!');&#10;            this.successMessage.set('');&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;}" />
              <option name="updatedContent" value="import { Component, inject, signal } from '@angular/core';&#10;import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';&#10;import { CommonModule } from '@angular/common';&#10;import { Router } from '@angular/router';&#10;import { PlayerService, Player } from '../Service/player.service';&#10;&#10;@Component({&#10;    selector: 'app-registration',&#10;    standalone: true,&#10;    imports: [CommonModule, ReactiveFormsModule],&#10;    templateUrl: './registration.html',&#10;    styleUrls: ['./registration.component.css']&#10;})&#10;export class RegistrationComponent {&#10;    private playerService = inject(PlayerService);&#10;    private fb = inject(FormBuilder);&#10;    private router = inject(Router);&#10;&#10;    fg: FormGroup;&#10;    successMessage = signal&lt;string&gt;('');&#10;    errorMessage = signal&lt;string&gt;('');&#10;&#10;    constructor() {&#10;        this.fg = this.fb.group({&#10;            fistName: ['', [Validators.required, Validators.minLength(2)]],&#10;            lastName: ['', [Validators.required, Validators.minLength(2)]],&#10;            nickname: ['', [Validators.required, Validators.minLength(3)]]&#10;        });&#10;    }&#10;&#10;    startGame(): void {&#10;        if (this.fg.valid) {&#10;            const formData = this.fg.value as {&#10;                fistName: string;&#10;                lastName: string;&#10;                nickname: string;&#10;            };&#10;&#10;            if (this.playerService.isNicknameExists(formData.nickname)) {&#10;                this.errorMessage.set('Нікнейм вже існує!');&#10;                this.successMessage.set('');&#10;                return;&#10;            }&#10;&#10;            const newPlayer: Player = {&#10;                fistName: formData.fistName,&#10;                lastName: formData.lastName,&#10;                nickname: formData.nickname,&#10;                level: 0,&#10;                averageAccuracy: 0&#10;            };&#10;&#10;            this.playerService.addPlayer(newPlayer);&#10;&#10;            this.successMessage.set('Реєстрація успішна! Переходимо до гри...');&#10;            this.errorMessage.set('');&#10;&#10;            setTimeout(() =&gt; {&#10;                this.router.navigate(['/game']);&#10;            }, 1500);&#10;        } else {&#10;            this.errorMessage.set('Будь ласка, заповніть всі поля правильно!');&#10;            this.successMessage.set('');&#10;            this.markAllFieldsAsTouched();&#10;        }&#10;    }&#10;&#10;    clear(): void {&#10;        this.fg.reset();&#10;        this.successMessage.set('');&#10;        this.errorMessage.set('');&#10;    }&#10;&#10;    private markAllFieldsAsTouched(): void {&#10;        Object.keys(this.fg.controls).forEach(key =&gt; {&#10;            this.fg.get(key)?.markAsTouched();&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/component/registration.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/component/registration.html" />
              <option name="originalContent" value="&lt;div class=&quot;registration-container&quot;&gt;&#10;    &lt;h1&gt; Реєстрація гравця&lt;/h1&gt;&#10;&#10;    &lt;form [formGroup]=&quot;fg&quot; (ngSubmit)=&quot;startGame()&quot;&gt;&#10;        &lt;table&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;Ім'я:&lt;/td&gt;&#10;                &lt;td&gt;&lt;input formControlName=&quot;firstName&quot; placeholder=&quot;Введіть ім'я&quot; /&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;Прізвище:&lt;/td&gt;&#10;                &lt;td&gt;&lt;input formControlName=&quot;lastName&quot; placeholder=&quot;Введіть прізвище&quot; /&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr&gt;&#10;                &lt;td&gt;Нікнейм:&lt;/td&gt;&#10;                &lt;td&gt;&lt;input formControlName=&quot;nickname&quot; placeholder=&quot;Введіть нікнейм&quot; /&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;&#10;        @if (successMessage()) {&#10;            &lt;div class=&quot;success&quot;&gt;{{ successMessage() }}&lt;/div&gt;&#10;        }&#10;        @if (errorMessage()) {&#10;            &lt;div class=&quot;error&quot;&gt;{{ errorMessage() }}&lt;/div&gt;&#10;        }&#10;&#10;        &lt;div class=&quot;buttons&quot;&gt;&#10;            &lt;button type=&quot;button&quot; (click)=&quot;clear()&quot;&gt;&#10;                &lt;span&gt;&lt;/span&gt;&#10;                &lt;span&gt;Очистити&lt;/span&gt;&#10;            &lt;/button&gt;&#10;            &lt;button type=&quot;submit&quot; (click)=&quot;startGame&quot;&gt;&#10;                &lt;span&gt;&lt;/span&gt;&#10;                &lt;span&gt;Почати гру&lt;/span&gt;&#10;            &lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/form&gt;&#10;&lt;/div&gt;" />
              <option name="updatedContent" value="&lt;div class=&quot;wrapper&quot;&gt;&#13;&#10;    &lt;div class=&quot;registration-container&quot;&gt;&#13;&#10;        &lt;h1 class=&quot;registration-title&quot;&gt; Реєстрація гравця&lt;/h1&gt;&#13;&#10;&#13;&#10;        &lt;form [formGroup]=&quot;fg&quot; (ngSubmit)=&quot;startGame()&quot;&gt;&#13;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#13;&#10;                &lt;label class=&quot;form-label&quot;&gt;Ім'я:&lt;/label&gt;&#13;&#10;                &lt;input &#13;&#10;                    formControlName=&quot;fistName&quot; &#13;&#10;                    class=&quot;form-input&quot;&#13;&#10;                    [class.invalid]=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&#13;&#10;                    placeholder=&quot;Введіть ваше ім'я&quot; &#13;&#10;                /&gt;&#13;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('fistName')?.invalid &amp;&amp; fg.get('fistName')?.touched&quot;&gt;&#13;&#10;                    Ім'я повинно містити мінімум 2 символи&#13;&#10;                &lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#13;&#10;                &lt;label class=&quot;form-label&quot;&gt;Прізвище:&lt;/label&gt;&#13;&#10;                &lt;input &#13;&#10;                    formControlName=&quot;lastName&quot; &#13;&#10;                    class=&quot;form-input&quot;&#13;&#10;                    [class.invalid]=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&#13;&#10;                    placeholder=&quot;Введіть ваше прізвище&quot; &#13;&#10;                /&gt;&#13;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('lastName')?.invalid &amp;&amp; fg.get('lastName')?.touched&quot;&gt;&#13;&#10;                    Прізвище повинно містити мінімум 2 символи&#13;&#10;                &lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#13;&#10;                &lt;label class=&quot;form-label&quot;&gt;Нікнейм:&lt;/label&gt;&#13;&#10;                &lt;input &#13;&#10;                    formControlName=&quot;nickname&quot; &#13;&#10;                    class=&quot;form-input&quot;&#13;&#10;                    [class.invalid]=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&#13;&#10;                    placeholder=&quot;Введіть унікальний нікнейм&quot; &#13;&#10;                /&gt;&#13;&#10;                &lt;span class=&quot;form-validation-error&quot; *ngIf=&quot;fg.get('nickname')?.invalid &amp;&amp; fg.get('nickname')?.touched&quot;&gt;&#13;&#10;                    Нікнейм повинен містити мінімум 3 символи&#13;&#10;                &lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;success-message&quot; *ngIf=&quot;successMessage()&quot;&gt;&#13;&#10;                {{ successMessage() }}&#13;&#10;            &lt;/div&gt;&#13;&#10;            &#13;&#10;            &lt;div class=&quot;error-message&quot; *ngIf=&quot;errorMessage()&quot;&gt;&#13;&#10;                {{ errorMessage() }}&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div class=&quot;button-container&quot;&gt;&#13;&#10;                &lt;button type=&quot;button&quot; class=&quot;gradient-button&quot; (click)=&quot;clear()&quot;&gt;&#13;&#10;                    &lt;span&gt;&lt;/span&gt;&#13;&#10;                    &lt;span&gt;Очистити&lt;/span&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;                &lt;button type=&quot;submit&quot; class=&quot;gradient-button&quot; [disabled]=&quot;fg.invalid&quot;&gt;&#13;&#10;                    &lt;span&gt;&lt;/span&gt;&#13;&#10;                    &lt;span&gt;Почати гру&lt;/span&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/game/PlaygroundComponent.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/game/PlaygroundComponent.ts" />
              <option name="originalContent" value="import {&#10;  Component,&#10;  ElementRef,&#10;  ViewChild,&#10;  computed,&#10;  signal,&#10;  inject,&#10;} from '@angular/core';&#10;import { Router } from '@angular/router';&#10;import { CommonModule } from '@angular/common';&#10;import { MatSlideToggleModule, MatSlideToggleChange } from '@angular/material/slide-toggle';&#10;import { A11yModule } from '@angular/cdk/a11y';&#10;import { TaskNoteComponent } from '../task-note/task-note.component';&#10;&#10;import {&#10;  getChangingQuote,&#10;  getResultQuote,&#10;  RESULT_QUOTES,&#10;  CHANGING_QUOTES,&#10;} from './playground-helpers';&#10;import {PlayerService} from &quot;../Service/player.service&quot;;&#10;&#10;@Component({&#10;  selector: 'app-playground',&#10;  standalone: true,&#10;  imports: [CommonModule, MatSlideToggleModule, A11yModule, TaskNoteComponent],&#10;  templateUrl: './playground.component.html',&#10;  styleUrls: ['./playground.component.css'],&#10;})&#10;export class PlaygroundComponent {&#10;  protected readonly isGuessModalOpen = signal(false);&#10;  protected readonly isTaskModalOpen = signal(true);&#10;  protected readonly isAccessiblePanelOpen = signal(false);&#10;  protected readonly rotateVal = signal(40);&#10;  protected readonly goal = signal(85);&#10;  protected readonly animatedAccuracy = signal(0);&#10;  protected readonly gameStats = signal({&#10;    level: 0,&#10;    totalAccuracy: 0,&#10;  });&#10;  protected readonly resultQuote = signal('');&#10;  protected readonly returnToStart = signal(false);&#10;  protected readonly router = inject(Router);&#10;  protected readonly playerService = inject(PlayerService);&#10;&#10;  private isDragging = false;&#10;  private currentInteractions = {&#10;    lastChangedAt: 75,&#10;    face: 0,&#10;    quote: &quot;Hi, I'm NG the Angle!&quot;,&#10;  };&#10;&#10;  @ViewChild('staticArrow') staticArrow!: ElementRef;&#10;&#10;  protected readonly totalAccuracyPercentage = computed(() =&gt; {&#10;    const { level, totalAccuracy } = this.gameStats();&#10;    if (level === 0) {&#10;      return 0;&#10;    }&#10;    return totalAccuracy / level;&#10;  });&#10;&#10;  protected readonly updatedInteractions = computed(() =&gt; {&#10;    if (&#10;      this.rotateVal() &gt; 75 &amp;&amp;&#10;      Math.abs(this.rotateVal() - this.currentInteractions.lastChangedAt) &gt;&#10;        70 &amp;&amp;&#10;      Math.random() &gt; 0.5&#10;    ) {&#10;      this.currentInteractions = {&#10;        lastChangedAt: this.rotateVal(),&#10;        face: Math.floor(Math.random() * 6),&#10;        quote: getChangingQuote(this.rotateVal()),&#10;      };&#10;    }&#10;    return this.currentInteractions;&#10;  });&#10;&#10;  constructor() {&#10;    this.resetGame();&#10;  }&#10;&#10;  resetGame() {&#10;    this.goal.set(Math.floor(Math.random() * 360));&#10;    this.rotateVal.set(40);&#10;  }&#10;&#10;  getRotation() {&#10;    return `rotate(${this.rotateVal()}deg)`;&#10;  }&#10;&#10;  getIndicatorStyle() {&#10;    return 0.487 * this.rotateVal() - 179.5;&#10;  }&#10;&#10;  getIndicatorRotation() {&#10;    return `rotate(${253 + this.rotateVal()}deg)`;&#10;  }&#10;&#10;  mouseDown() {&#10;    this.isDragging = true;&#10;  }&#10;&#10;      stopDragging() {&#10;    this.isDragging = false;&#10;  }&#10;&#10;  mouseMove(e: MouseEvent) {&#10;    const vh30 = 0.3 * document.documentElement.clientHeight;&#10;    if (!this.isDragging) return;&#10;&#10;    let pointX = e.pageX - (this.staticArrow.nativeElement.offsetLeft + 2.5);&#10;    let pointY = e.pageY - (this.staticArrow.nativeElement.offsetTop + vh30);&#10;&#10;    let calculatedAngle = 0;&#10;    if (pointX &gt;= 0 &amp;&amp; pointY &lt; 0) {&#10;      calculatedAngle =&#10;        90 - (Math.atan2(Math.abs(pointY), pointX) * 180) / Math.PI;&#10;    } else if (pointX &gt;= 0 &amp;&amp; pointY &gt;= 0) {&#10;      calculatedAngle = 90 + (Math.atan2(pointY, pointX) * 180) / Math.PI;&#10;    } else if (pointX &lt; 0 &amp;&amp; pointY &gt;= 0) {&#10;      calculatedAngle =&#10;        270 - (Math.atan2(pointY, Math.abs(pointX)) * 180) / Math.PI;&#10;    } else {&#10;      calculatedAngle =&#10;        270 + (Math.atan2(Math.abs(pointY), Math.abs(pointX)) * 180) / Math.PI;&#10;    }&#10;&#10;    this.rotateVal.set(calculatedAngle);&#10;  }&#10;&#10;  adjustAngle(degreeChange: number) {&#10;    this.rotateVal.update((x) =&gt;&#10;      x + degreeChange &lt; 0 ? 360 + (x + degreeChange) : (x + degreeChange) % 360&#10;    );&#10;  }&#10;&#10;  touchMove(e: Event) {&#10;    let firstTouch = (e as TouchEvent).touches[0];&#10;    if (firstTouch) {&#10;      this.mouseMove({&#10;        pageX: firstTouch.pageX,&#10;        pageY: firstTouch.pageY,&#10;      } as MouseEvent);&#10;    }&#10;  }&#10;&#10;  guess() {&#10;    this.isGuessModalOpen.set(true);&#10;    const calcAcc = Math.abs(&#10;      100 - (Math.abs(this.goal() - this.rotateVal()) / 180) * 100&#10;    );&#10;    this.resultQuote.set(getResultQuote(calcAcc));&#10;    this.animatedAccuracy.set(calcAcc &gt; 20 ? calcAcc - 20 : 0);&#10;    this.powerUpAccuracy(calcAcc);&#10;    this.gameStats.update(({ level, totalAccuracy }) =&gt; ({&#10;      level: level + 1,&#10;      totalAccuracy: totalAccuracy + calcAcc,&#10;    }));&#10;  }&#10;&#10;  showTask() {&#10;    this.isTaskModalOpen.set(true);&#10;  }&#10;  &#10;  returnToStartGame() {&#10;    this.playerService.updatatePlayerStats(&#10;      this.gameStats().level,&#10;      this.totalAccuracyPercentage()&#10;    );&#10;  this.router.navigate(['/registration']);&#10;  }&#10;&#10;  powerUpAccuracy(finalAcc: number) {&#10;    if (this.animatedAccuracy() &gt;= finalAcc) return;&#10;&#10;    let difference = finalAcc - this.animatedAccuracy();&#10;    if (difference &gt; 20) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 10.52);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 30);&#10;    } else if (difference &gt; 4) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 3.31);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 40);&#10;    } else if (difference &gt; 0.5) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.49);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 50);&#10;    } else if (difference &gt;= 0.1) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.1);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 100);&#10;    } else {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.01);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 100);&#10;    }&#10;  }&#10;&#10;  close() {&#10;    this.isGuessModalOpen.set(false);&#10;    this.resetGame();&#10;  }&#10;&#10;  closeTask() {&#10;    this.isTaskModalOpen.set(false);&#10;  }&#10;&#10;  getText() {&#10;    const roundedAcc = Math.floor(this.totalAccuracyPercentage() * 10) / 10;&#10;    let emojiAccuracy = '';&#10;    for (let i = 0; i &lt; 5; i++) {&#10;      emojiAccuracy += roundedAcc &gt;= 20 * (i + 1) ? '' : '⬜️';&#10;    }&#10;    return encodeURIComponent(&#10;      ` ${emojiAccuracy} \n My angles are ${roundedAcc}% accurate on level ${&#10;        this.gameStats().level&#10;      }. \n\nHow @Angular are you? \nhttps://angular.dev/playground`&#10;    );&#10;  }&#10;&#10;  toggleA11yControls(event: MatSlideToggleChange) {&#10;    this.isAccessiblePanelOpen.set(event.checked);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import {&#10;  Component,&#10;  ElementRef,&#10;  ViewChild,&#10;  computed,&#10;  signal,&#10;  inject,&#10;} from '@angular/core';&#10;import { Router } from '@angular/router';&#10;import { CommonModule } from '@angular/common';&#10;import { MatSlideToggleModule, MatSlideToggleChange } from '@angular/material/slide-toggle';&#10;import { A11yModule } from '@angular/cdk/a11y';&#10;import { TaskNoteComponent } from '../task-note/task-note.component';&#10;&#10;import {&#10;  getChangingQuote,&#10;  getResultQuote,&#10;  RESULT_QUOTES,&#10;  CHANGING_QUOTES,&#10;} from './playground-helpers';&#10;import {PlayerService} from &quot;../Service/player.service&quot;;&#10;&#10;@Component({&#10;  selector: 'app-playground',&#10;  standalone: true,&#10;  imports: [CommonModule, MatSlideToggleModule, A11yModule, TaskNoteComponent],&#10;  templateUrl: './playground.component.html',&#10;  styleUrls: ['./playground.component.css'],&#10;})&#10;export class PlaygroundComponent {&#10;  protected readonly isGuessModalOpen = signal(false);&#10;  protected readonly isTaskModalOpen = signal(true);&#10;  protected readonly isAccessiblePanelOpen = signal(false);&#10;  protected readonly rotateVal = signal(40);&#10;  protected readonly goal = signal(85);&#10;  protected readonly animatedAccuracy = signal(0);&#10;  protected readonly gameStats = signal({&#10;    level: 0,&#10;    totalAccuracy: 0,&#10;  });&#10;  protected readonly resultQuote = signal('');&#10;  protected readonly returnToStart = signal(false);&#10;  protected readonly router = inject(Router);&#10;  protected readonly playerService = inject(PlayerService);&#10;&#10;  private isDragging = false;&#10;  private currentInteractions = {&#10;    lastChangedAt: 75,&#10;    face: 0,&#10;    quote: &quot;Hi, I'm NG the Angle!&quot;,&#10;  };&#10;&#10;  @ViewChild('staticArrow') staticArrow!: ElementRef;&#10;&#10;  protected readonly totalAccuracyPercentage = computed(() =&gt; {&#10;    const { level, totalAccuracy } = this.gameStats();&#10;    if (level === 0) {&#10;      return 0;&#10;    }&#10;    return totalAccuracy / level;&#10;  });&#10;&#10;  protected readonly updatedInteractions = computed(() =&gt; {&#10;    if (&#10;      this.rotateVal() &gt; 75 &amp;&amp;&#10;      Math.abs(this.rotateVal() - this.currentInteractions.lastChangedAt) &gt;&#10;        70 &amp;&amp;&#10;      Math.random() &gt; 0.5&#10;    ) {&#10;      this.currentInteractions = {&#10;        lastChangedAt: this.rotateVal(),&#10;        face: Math.floor(Math.random() * 6),&#10;        quote: getChangingQuote(this.rotateVal()),&#10;      };&#10;    }&#10;    return this.currentInteractions;&#10;  });&#10;&#10;  constructor() {&#10;    this.resetGame();&#10;  }&#10;&#10;  resetGame() {&#10;    this.goal.set(Math.floor(Math.random() * 360));&#10;    this.rotateVal.set(40);&#10;  }&#10;&#10;  getRotation() {&#10;    return `rotate(${this.rotateVal()}deg)`;&#10;  }&#10;&#10;  getIndicatorStyle() {&#10;    return 0.487 * this.rotateVal() - 179.5;&#10;  }&#10;&#10;  getIndicatorRotation() {&#10;    return `rotate(${253 + this.rotateVal()}deg)`;&#10;  }&#10;&#10;  mouseDown() {&#10;    this.isDragging = true;&#10;  }&#10;&#10;      stopDragging() {&#10;    this.isDragging = false;&#10;  }&#10;&#10;  mouseMove(e: MouseEvent) {&#10;    const vh30 = 0.3 * document.documentElement.clientHeight;&#10;    if (!this.isDragging) return;&#10;&#10;    let pointX = e.pageX - (this.staticArrow.nativeElement.offsetLeft + 2.5);&#10;    let pointY = e.pageY - (this.staticArrow.nativeElement.offsetTop + vh30);&#10;&#10;    let calculatedAngle = 0;&#10;    if (pointX &gt;= 0 &amp;&amp; pointY &lt; 0) {&#10;      calculatedAngle =&#10;        90 - (Math.atan2(Math.abs(pointY), pointX) * 180) / Math.PI;&#10;    } else if (pointX &gt;= 0 &amp;&amp; pointY &gt;= 0) {&#10;      calculatedAngle = 90 + (Math.atan2(pointY, pointX) * 180) / Math.PI;&#10;    } else if (pointX &lt; 0 &amp;&amp; pointY &gt;= 0) {&#10;      calculatedAngle =&#10;        270 - (Math.atan2(pointY, Math.abs(pointX)) * 180) / Math.PI;&#10;    } else {&#10;      calculatedAngle =&#10;        270 + (Math.atan2(Math.abs(pointY), Math.abs(pointX)) * 180) / Math.PI;&#10;    }&#10;&#10;    this.rotateVal.set(calculatedAngle);&#10;  }&#10;&#10;  adjustAngle(degreeChange: number) {&#10;    this.rotateVal.update((x) =&gt;&#10;      x + degreeChange &lt; 0 ? 360 + (x + degreeChange) : (x + degreeChange) % 360&#10;    );&#10;  }&#10;&#10;  touchMove(e: Event) {&#10;    let firstTouch = (e as TouchEvent).touches[0];&#10;    if (firstTouch) {&#10;      this.mouseMove({&#10;        pageX: firstTouch.pageX,&#10;        pageY: firstTouch.pageY,&#10;      } as MouseEvent);&#10;    }&#10;  }&#10;&#10;  guess() {&#10;    this.isGuessModalOpen.set(true);&#10;    const calcAcc = Math.abs(&#10;      100 - (Math.abs(this.goal() - this.rotateVal()) / 180) * 100&#10;    );&#10;    this.resultQuote.set(getResultQuote(calcAcc));&#10;    this.animatedAccuracy.set(calcAcc &gt; 20 ? calcAcc - 20 : 0);&#10;    this.powerUpAccuracy(calcAcc);&#10;    this.gameStats.update(({ level, totalAccuracy }) =&gt; ({&#10;      level: level + 1,&#10;      totalAccuracy: totalAccuracy + calcAcc,&#10;    }));&#10;  }&#10;&#10;  showTask() {&#10;    this.isTaskModalOpen.set(true);&#10;  }&#10;&#10;  returnToStartGame() {&#10;    this.playerService.updatatePlayerStats(&#10;      this.gameStats().level,&#10;      this.totalAccuracyPercentage()&#10;    );&#10;  this.router.navigate(['/registration']);&#10;  }&#10;&#10;  powerUpAccuracy(finalAcc: number) {&#10;    if (this.animatedAccuracy() &gt;= finalAcc) return;&#10;&#10;    let difference = finalAcc - this.animatedAccuracy();&#10;    if (difference &gt; 20) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 10.52);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 30);&#10;    } else if (difference &gt; 4) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 3.31);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 40);&#10;    } else if (difference &gt; 0.5) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.49);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 50);&#10;    } else if (difference &gt;= 0.1) {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.1);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 100);&#10;    } else {&#10;      this.animatedAccuracy.update((x) =&gt; x + 0.01);&#10;      setTimeout(() =&gt; this.powerUpAccuracy(finalAcc), 100);&#10;    }&#10;  }&#10;&#10;  close() {&#10;    this.isGuessModalOpen.set(false);&#10;    this.resetGame();&#10;  }&#10;&#10;  closeTask() {&#10;    this.isTaskModalOpen.set(false);&#10;  }&#10;&#10;  getText() {&#10;    const roundedAcc = Math.floor(this.totalAccuracyPercentage() * 10) / 10;&#10;    let emojiAccuracy = '';&#10;    for (let i = 0; i &lt; 5; i++) {&#10;      emojiAccuracy += roundedAcc &gt;= 20 * (i + 1) ? '' : '⬜️';&#10;    }&#10;    return encodeURIComponent(&#10;      ` ${emojiAccuracy} \n My angles are ${roundedAcc}% accurate on level ${&#10;        this.gameStats().level&#10;      }. \n\nHow @Angular are you? \nhttps://angular.dev/playground`&#10;    );&#10;  }&#10;&#10;  toggleA11yControls(event: MatSlideToggleChange) {&#10;    this.isAccessiblePanelOpen.set(event.checked);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/game/playground-helpers.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/game/playground-helpers.ts" />
              <option name="originalContent" value="// playground-helpers.ts&#10;&#10;export const RESULT_QUOTES = [&#10;  [&#10;    'Not quite right!',&#10;    'You missed the mark!',&#10;    'Have you seen an angle before?',&#10;    'Your measurements are all over the place!',&#10;    'Your precision needs work!',&#10;  ],&#10;  [&#10;    'Not too shabby.',&#10;    'Getting sharper, keep it up!',&#10;    'Not perfect, but getting better!',&#10;  ],&#10;  [&#10;    'Your angles are on point!',&#10;    'Your precision is unparalleled!',&#10;    'Your geometric skills are divine!',&#10;    &quot;Amazing! You're acute-y!&quot;,&#10;    'Wow! So precise!',&#10;  ],&#10;];&#10;&#10;export const CHANGING_QUOTES = [&#10;  [&quot;I'm such a-cute-y!&quot;, &quot;I'm a tiny slice of pi!&quot;, &quot;You're doing great!&quot;],&#10;  [&quot;I'm wide open!&quot;, 'Keep going!', 'Wow!', 'Wheee!!'],&#10;  [&#10;    &quot;I'm so obtuse!&quot;,&#10;    'The bigger the better!',&#10;    &quot;Life's too short for right angles!&quot;,&#10;    'Whoa!',&#10;  ],&#10;];&#10;&#10;/**&#10; * Get a random changing quote based on the rotation value&#10; * @param rotateValue current angle&#10; * @returns a random quote string&#10; */&#10;export function getChangingQuote(rotateValue: number): string {&#10;  let possibleQuotes = CHANGING_QUOTES[1];&#10;&#10;  if (rotateValue &lt; 110) {&#10;    possibleQuotes = CHANGING_QUOTES[0];&#10;  } else if (rotateValue &gt;= 230) {&#10;    possibleQuotes = CHANGING_QUOTES[2];&#10;  }&#10;&#10;  const randomQuoteIndex = Math.floor(Math.random() * possibleQuotes.length);&#10;  return possibleQuotes[randomQuoteIndex];&#10;}&#10;&#10;/**&#10; * Get a result quote based on the accuracy percentage&#10; * @param accuracy accuracy percentage&#10; * @returns a random result quote&#10; */&#10;export function getResultQuote(accuracy: number): string {&#10;  let possibleQuotes = RESULT_QUOTES[1];&#10;&#10;  if (accuracy &lt; 50) {&#10;    possibleQuotes = RESULT_QUOTES[0];&#10;  } else if (accuracy &gt;= 85) {&#10;    possibleQuotes = RESULT_QUOTES[2];&#10;  }&#10;&#10;  const randomQuoteIndex = Math.floor(Math.random() * possibleQuotes.length);&#10;  return possibleQuotes[randomQuoteIndex];&#10;}&#10;" />
              <option name="updatedContent" value="// playground-helpers.ts&#10;&#10;export const RESULT_QUOTES = [&#10;  [&#10;    'Not quite right!',&#10;    'You missed the mark!',&#10;    'Have you seen an angle before?',&#10;    'Your measurements are all over the place!',&#10;    'Your precision needs work!',&#10;  ],&#10;  [&#10;    'Not too shabby.',&#10;    'Getting sharper, keep it up!',&#10;    'Not perfect, but getting better!',&#10;  ],&#10;  [&#10;    'Your angles are on point!',&#10;    'Your precision is unparalleled!',&#10;    'Your geometric skills are divine!',&#10;    &quot;Amazing! You're acute-y!&quot;,&#10;    'Wow! So precise!',&#10;  ],&#10;];&#10;&#10;export const CHANGING_QUOTES = [&#10;  [&quot;I'm such a-cute-y!&quot;, &quot;I'm a tiny slice of pi!&quot;, &quot;You're doing great!&quot;],&#10;  [&quot;I'm wide open!&quot;, 'Keep going!', 'Wow!', 'Wheee!!'],&#10;  [&#10;    &quot;I'm so obtuse!&quot;,&#10;    'The bigger the better!',&#10;    &quot;Life's too short for right angles!&quot;,&#10;    'Whoa!',&#10;  ],&#10;];&#10;&#10;/**&#10; * Get a random changing quote based on the rotation value&#10; * @param rotateValue current angle&#10; * @returns a random quote string&#10; */&#10;export function getChangingQuote(rotateValue: number): string {&#10;  let possibleQuotes = CHANGING_QUOTES[1];&#10;&#10;  if (rotateValue &lt; 110) {&#10;    possibleQuotes = CHANGING_QUOTES[0];&#10;  } else if (rotateValue &gt;= 230) {&#10;    possibleQuotes = CHANGING_QUOTES[2];&#10;  }&#10;&#10;  const randomQuoteIndex = Math.floor(Math.random() * possibleQuotes.length);&#10;  return possibleQuotes[randomQuoteIndex];&#10;}&#10;&#10;/**&#10; * Get a result quote based on the accuracy percentage&#10; * @param accuracy accuracy percentage&#10; * @returns a random result quote&#10; */&#10;export function getResultQuote(accuracy: number): string {&#10;  let possibleQuotes = RESULT_QUOTES[1];&#10;&#10;  if (accuracy &lt; 50) {&#10;    possibleQuotes = RESULT_QUOTES[0];&#10;  } else if (accuracy &gt;= 85) {&#10;    possibleQuotes = RESULT_QUOTES[2];&#10;  }&#10;&#10;  const randomQuoteIndex = Math.floor(Math.random() * possibleQuotes.length);&#10;  return possibleQuotes[randomQuoteIndex];&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.ts" />
              <option name="originalContent" value="import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';&#10;import { AppModule } from './app-module';&#10;&#10;platformBrowserDynamic().bootstrapModule(AppModule)&#10;  .catch(err =&gt; console.error(err));&#10;" />
              <option name="updatedContent" value="import { bootstrapApplication } from '@angular/platform-browser';&#10;import { provideRouter } from '@angular/router';&#10;import { importProvidersFrom } from '@angular/core';&#10;import { BrowserModule } from '@angular/platform-browser';&#10;import { AppComponent } from './app/app.component';&#10;import { routes } from './app/app.routes';&#10;import { PlayerService } from './Service/player.service';&#10;&#10;bootstrapApplication(AppComponent, {&#10;    providers: [&#10;        provideRouter(routes),&#10;        importProvidersFrom(BrowserModule),&#10;        PlayerService&#10;    ]&#10;}).catch(err =&gt; console.error(err));" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/task-note/task-note.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/task-note/task-note.component.ts" />
              <option name="originalContent" value="import { Component } from '@angular/core';&#10;&#10;@Component({&#10;  selector: 'app-task-note',&#10;  templateUrl: './task-note.component.html',&#10;  styleUrls: ['./task-note.component.css'],&#10;})&#10;export class TaskNoteComponent {}&#10;" />
              <option name="updatedContent" value="import { Component } from '@angular/core';&#10;import { CommonModule } from '@angular/common';&#10;&#10;@Component({&#10;  selector: 'app-task-note',&#10;  standalone: true,&#10;  imports: [CommonModule],&#10;  templateUrl: './task-note.component.html',&#10;  styleUrls: ['./task-note.component.css'],&#10;})&#10;export class TaskNoteComponent {}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>